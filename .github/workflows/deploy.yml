name: GitHub Pages

on:
  push:
    branches:
      - uat

jobs:
  deploy:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1

      - name: Environment Check
        id: trigger-env
        shell: bash
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/uat" ]];then
            echo "AWS_DISTRIBUTION_ID=${{ secrets.UAT_AWS_DISTRIBUTION_ID }}" >> "$GITHUB_OUTPUT"
            echo "AWS_ACCOUNT_ID=${{ secrets.UAT_AWS_ACCOUNT_ID }}" >> "$GITHUB_OUTPUT"
            echo "BUCKET_NAME=${{ vars.UAT_AWS_S3_BUCKET_NAME }}" >> "$GITHUB_OUTPUT"
            sed -i "s/${{ vars.PRD_DOMAIN }}/${{ vars.UAT_DOMAIN }}/" config.toml
            echo "" >> content/_index.md
            echo "" >> content/_index.md
            echo "# This is UAT" >> content/_index.md

          elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "AWS_DISTRIBUTION_ID=${{ secrets.PRD_AWS_DISTRIBUTION_ID }}" >> "$GITHUB_OUTPUT"
            echo "AWS_ACCOUNT_ID=${{ secrets.PRD_AWS_ACCOUNT_ID }}" >> "$GITHUB_OUTPUT"
            echo "BUCKET_NAME=${{ vars.PRD_AWS_S3_BUCKET_NAME }}" >> "$GITHUB_OUTPUT"

          else
            echo "nothing happened"
            exit 0
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
        env:
          AWS_ACCOUNT_ID: ${{ steps.trigger-env.outputs.AWS_ACCOUNT_ID }}
        timeout-minutes: 1

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.121.0'

      - name: Build
        run: hugo --minify
  
      - name: Upload to S3
        env:
          BUCKET_NAME: ${{ steps.trigger-env.outputs.BUCKET_NAME }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
        run: |
          aws s3 sync ./public s3://${{ env.BUCKET_NAME }} --delete

      - name: Create AWS CloudFront Invalidation
        run: aws cloudfront create-invalidation --distribution-id ${{ env.AWS_DISTRIBUTION_ID }} --paths "/"
        env:
          AWS_DISTRIBUTION_ID: ${{ steps.trigger-env.outputs.AWS_DISTRIBUTION_ID }}